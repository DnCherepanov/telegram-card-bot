import os
import random
import json
from telegram import Update, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å TELEGRAM_BOT_TOKEN")

CLIENTS_DIR = "cards/clients"
MANAGERS_DIR = "cards/managers"
STATS_FILE = "bot_stats.json"
ADMIN_ID = 190470202  # –í–∞—à ID Telegram

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot_stats = {
    "total_users": 0,
    "active_users": set(),
    "commands_used": {},
    "cards_shown": {
        "clients": 0,
        "managers": 0
    }
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    try:
        with open(STATS_FILE, 'r') as f:
            loaded = json.load(f)
            loaded["active_users"] = set(loaded["active_users"])
            return loaded
    except (FileNotFoundError, json.JSONDecodeError):
        return bot_stats.copy()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def save_stats():
    with open(STATS_FILE, 'w') as f:
        stats_to_save = bot_stats.copy()
        stats_to_save["active_users"] = list(stats_to_save["active_users"])
        json.dump(stats_to_save, f)

bot_stats = load_stats()

GREETINGS = [
    "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∫–∞—Ä—Ç–æ—á–∫–∞–º? üé≤",
    "–°–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ! üíº", 
    "–†–∞–∑–¥–∞—é –∫–∞—Ä—Ç—ã –∫–∞–∫ –º–∞–≥! üé©‚ú®",
    "–ö–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è —É–¥–∏–≤–∏–º? üòè"
]

ERRORS = {
    "no_clients": "‚ùå –í –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ! –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–µ–∫.",
    "no_managers": "‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –≤—Å–µ –≤ –æ—Ç–ø—É—Å–∫–µ! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 6 –∫–∞—Ä—Ç–æ—á–µ–∫.",
    "all_used": "‚ÑπÔ∏è –í—Å–µ –∫–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."
}

ABOUT_TEXT = """üé≤ –û–± –∏–≥—Ä–µ

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—É—é –æ–±—É—á–∞—é—â—É—é –∏–≥—Ä—É, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç.

üìö –û–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫:

üÉè –ö–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Äî –Ω–∞ –Ω–∏—Ö:
- –§—Ä–∞–∑–∞, –∫–æ—Ç–æ—Ä—É—é –≥–æ–≤–æ—Ä–∏—Ç –∫–ª–∏–µ–Ω—Ç,
- –ë–æ–ª—å, —Å—Ç–æ—è—â–∞—è –∑–∞ —ç—Ç–æ–π —Ñ—Ä–∞–∑–æ–π,
- –ò –≤–æ–ø—Ä–æ—Å: —á—Ç–æ –≤—ã —Å–∫–∞–∂–µ—Ç–µ, —á—Ç–æ–±—ã –æ–Ω –∑–∞–¥—É–º–∞–ª—Å—è?

üëî –ö–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ‚Äî —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤. –ö–∞–∂–¥–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç:
- üß† –ó–µ—Ä–Ω–æ —Å–æ–º–Ω–µ–Ω–∏—è ‚Äî –∫–æ—Ä–æ—Ç–∫—É—é —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è —Å–±–∏–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
- üó£Ô∏è –†–µ—á–µ–≤–æ–π –º–æ–¥—É–ª—å ‚Äî –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
- üéØ –§–æ–∫—É—Å ‚Äî –Ω–∞ —á—ë–º –¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç: –≥–∞—Ä–∞–Ω—Ç–∏—è, –æ–ø—ã—Ç, –º–æ–Ω—Ç–∞–∂ –∏ —Ç.–¥.

üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?
1Ô∏è‚É£ –ë–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ —á–∏—Ç–∞–π—Ç–µ –≤—Å–ª—É—Ö
2Ô∏è‚É£ –ü–æ–¥–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
3Ô∏è‚É£ –û—Ç–≤–µ—á–∞–π—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –≤ –¥–≤–∞ —à–∞–≥–∞:
   - üß† –°–Ω–∞—á–∞–ª–∞ ‚Äî –∑–µ—Ä–Ω–æ —Å–æ–º–Ω–µ–Ω–∏—è (–ª—ë–≥–∫–∏–π ¬´—Ç—ã—á–æ–∫¬ª –≤ –µ–≥–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
   - üó£Ô∏è –ü–æ—Ç–æ–º ‚Äî —Ä–µ—á–µ–≤–æ–π –º–æ–¥—É–ª—å (–ø–æ–∫–∞–∂–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å)

‚ú® –ì–∏–±–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫
–ö–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ‚Äî –Ω–µ –¥–æ–≥–º–∞! 
- –ú–µ–Ω—è–π—Ç–µ —Å–ª–æ–≤–∞, —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–≤–æ–∏–º —è–∑—ã–∫–æ–º
- –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
  üß† ‚Üí üó£Ô∏è ‚Üí üéØ

üèÜ –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?
- –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
- –†–∞–∑–≤–∏—Ç–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
- –ë–æ–ª—å—à–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –º–µ–Ω—å—à–µ —É—Ö–æ–¥–æ–≤ –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º

üöÄ –£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!"""

class GameState:
    def __init__(self):
        self.reset()

    def reset(self):
        self.used_manager_cards = set()
        self.current_hand = []
        self.last_used_card = None
        self.last_message_ids = []
        self.last_client_card = None

async def delete_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∞–º–∏"""
    game = context.user_data.get('game')
    if not game or not game.last_message_ids:
        return

    for msg_id in game.last_message_ids:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=msg_id
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    game.last_message_ids = []

async def send_client_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞"""
    game = context.user_data.setdefault('game', GameState())

    try:
        clients = [f for f in os.listdir(CLIENTS_DIR) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if not clients:
            await update.message.reply_text(ERRORS["no_clients"])
            return

        client = random.choice(clients)
        game.last_client_card = client
        bot_stats["cards_shown"]["clients"] += 1
        save_stats()

        await update.message.reply_text("üëá –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
        with open(os.path.join(CLIENTS_DIR, client), 'rb') as photo:
            await context.bot.send_photo(update.effective_chat.id, photo)

        await show_client_controls(update, context)

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞")

async def show_client_controls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    keyboard = [
        [KeyboardButton("üîÑ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç"), KeyboardButton("üòä –ú–µ–Ω–µ–¥–∂–µ—Ä")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫—É"), KeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞")],
        [KeyboardButton("‚ùì –û–± –∏–≥—Ä–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_manager_hand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–∞—Ä—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    game = context.user_data.setdefault('game', GameState())

    await delete_previous_messages(update, context)

    if not game.current_hand:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
        return

    media = []
    for i, card in enumerate(game.current_hand, 1):
        try:
            media.append(InputMediaPhoto(
                media=open(os.path.join(MANAGERS_DIR, card), 'rb'),
                caption=f"–ö–∞—Ä—Ç–∞ {i}"
            ))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã {card}: {e}")
            continue

    if not media:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—ã")
        return

    try:
        sent_messages = await context.bot.send_media_group(
            chat_id=update.effective_chat.id,
            media=media
        )
        game.last_message_ids = [msg.message_id for msg in sent_messages]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã")

    keyboard = [
        [KeyboardButton(f"‚¨ÜÔ∏è –ö–∞—Ä—Ç–∞ {i+1}") for i in range(len(game.current_hand))],
        [KeyboardButton("‚ûï –î–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton("üë©üèª‚Äçü¶≥ –ö–ª–∏–µ–Ω—Ç")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫—É"), KeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞")],
        [KeyboardButton("‚ùì –û–± –∏–≥—Ä–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    control_msg = await update.message.reply_text(
        f"üìã –í–∞—à–∏ –∫–∞—Ä—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ({len(game.current_hand)} —à—Ç.):",
        reply_markup=reply_markup
    )
    game.last_message_ids.append(control_msg.message_id)

async def deal_manager_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    game = context.user_data.setdefault('game', GameState())

    try:
        managers = [f for f in os.listdir(MANAGERS_DIR) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        if len(managers) < 6:
            await update.message.reply_text(ERRORS["no_managers"])
            return

        available = [m for m in managers if m not in game.used_manager_cards]
        if len(available) < 6:
            await update.message.reply_text(ERRORS["all_used"])
            return

        game.current_hand = random.sample(available, 6)
        bot_stats["cards_shown"]["managers"] += 6
        save_stats()

        await show_manager_hand(update, context)

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∫–∞—Ä—Ç")

async def draw_manager_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    game = context.user_data.setdefault('game', GameState())

    try:
        managers = [f for f in os.listdir(MANAGERS_DIR) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
        available = [m for m in managers if m not in game.used_manager_cards and m not in game.current_hand]

        if not available:
            await update.message.reply_text(ERRORS["all_used"])
            return

        new_card = random.choice(available)
        game.current_hand.append(new_card)
        bot_stats["cards_shown"]["managers"] += 1
        save_stats()

        await show_manager_hand(update, context)

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–æ—Ä–µ –∫–∞—Ä—Ç—ã")

async def discard_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
    game = context.user_data.setdefault('game', GameState())

    try:
        card_num = int(update.message.text.split()[-1]) - 1
        if 0 <= card_num < len(game.current_hand):
            used_card = game.current_hand.pop(card_num)
            game.used_manager_cards.add(used_card)

            with open(os.path.join(MANAGERS_DIR, used_card), 'rb') as photo:
                await context.bot.send_photo(
                    update.effective_chat.id,
                    photo,
                    caption=f"–ö–∞—Ä—Ç–∞ {card_num+1} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!"
                )

            await show_manager_hand(update, context)
        else:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã")

async def reset_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É"""
    game = context.user_data.setdefault('game', GameState())
    await delete_previous_messages(update, context)
    game.reset()
    await update.message.reply_text("üîÑ –ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
    keyboard = [
        [KeyboardButton("üë©üèª‚Äçü¶≥ –ö–ª–∏–µ–Ω—Ç"), KeyboardButton("üòä –ú–µ–Ω–µ–¥–∂–µ—Ä")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫—É"), KeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞")],
        [KeyboardButton("‚ùì –û–± –∏–≥—Ä–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"{random.choice(GREETINGS)}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def about_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ"""
    await update.message.reply_text(ABOUT_TEXT)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return

    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_stats['total_users']}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(bot_stats['active_users'])}\n"
        f"üÉè –ö–∞—Ä—Ç–æ—á–µ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–æ: {bot_stats['cards_shown']['clients']}\n"
        f"üëî –ö–∞—Ä—Ç–æ—á–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–æ: {bot_stats['cards_shown']['managers']}\n"
        "\nüìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n"
    )

    for cmd, count in sorted(bot_stats["commands_used"].items()):
        stats_text += f"{cmd}: {count}\n"

    await update.message.reply_text(stats_text)

async def send_welcome(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.effective_user.id
    bot_stats["active_users"].add(user_id)
    bot_stats["total_users"] = len(bot_stats["active_users"])
    bot_stats["commands_used"]["welcome"] = bot_stats["commands_used"].get("welcome", 0) + 1
    save_stats()

    await about_game(update, context)

    keyboard = [[KeyboardButton("/start")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!",
        reply_markup=reply_markup
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    bot_stats["active_users"].add(user_id)
    bot_stats["total_users"] = len(bot_stats["active_users"])
    bot_stats["commands_used"]["start"] = bot_stats["commands_used"].get("start", 0) + 1
    save_stats()

    await about_game(update, context)

    keyboard = [
        [KeyboardButton("üë©üèª‚Äçü¶≥ –ö–ª–∏–µ–Ω—Ç"), KeyboardButton("üòä –ú–µ–Ω–µ–¥–∂–µ—Ä")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫—É"), KeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞")],
        [KeyboardButton("‚ùì –û–± –∏–≥—Ä–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        f"{random.choice(GREETINGS)}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    bot_stats["commands_used"][text] = bot_stats["commands_used"].get(text, 0) + 1
    save_stats()

    if text == "üë©üèª‚Äçü¶≥ –ö–ª–∏–µ–Ω—Ç":
        await send_client_card(update, context)
    elif text == "üòä –ú–µ–Ω–µ–¥–∂–µ—Ä":
        await deal_manager_cards(update, context)
    elif text == "‚ûï –î–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É":
        await draw_manager_card(update, context)
    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫—É":
        await show_manager_hand(update, context)
    elif text.startswith("‚¨ÜÔ∏è –ö–∞—Ä—Ç–∞"):
        await discard_card(update, context)
    elif text in ["üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ"]:
        await reset_game(update, context)
    elif text == "üîÑ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç":
        await send_client_card(update, context)
    elif text == "‚ùì –û–± –∏–≥—Ä–µ":
        await about_game(update, context)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    os.makedirs(CLIENTS_DIR, exist_ok=True)
    os.makedirs(MANAGERS_DIR, exist_ok=True)

    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", send_welcome))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, send_welcome))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()